// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Crossprod
NumericVector::elem_type Crossprod(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _segmentation_Crossprod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Crossprod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Quantile
double Quantile(const std::vector<double>& x, double p);
RcppExport SEXP _segmentation_Quantile(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, p));
    return rcpp_result_gen;
END_RCPP
}
// sawMarkMCpp
std::vector<bool> sawMarkMCpp(const NumericMatrix& x, int L, double frac1, double frac2);
RcppExport SEXP _segmentation_sawMarkMCpp(SEXP xSEXP, SEXP LSEXP, SEXP frac1SEXP, SEXP frac2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type frac1(frac1SEXP);
    Rcpp::traits::input_parameter< double >::type frac2(frac2SEXP);
    rcpp_result_gen = Rcpp::wrap(sawMarkMCpp(x, L, frac1, frac2));
    return rcpp_result_gen;
END_RCPP
}
// compactMultiCpp
List compactMultiCpp(const NumericMatrix& y, const std::vector<bool>& mark);
RcppExport SEXP _segmentation_compactMultiCpp(SEXP ySEXP, SEXP markSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type mark(markSEXP);
    rcpp_result_gen = Rcpp::wrap(compactMultiCpp(y, mark));
    return rcpp_result_gen;
END_RCPP
}
// markMultiPottsCpp
std::vector<bool> markMultiPottsCpp(const std::vector<int>& nr, const NumericMatrix& sum, double gamma, int subSize);
RcppExport SEXP _segmentation_markMultiPottsCpp(SEXP nrSEXP, SEXP sumSEXP, SEXP gammaSEXP, SEXP subSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type subSize(subSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(markMultiPottsCpp(nr, sum, gamma, subSize));
    return rcpp_result_gen;
END_RCPP
}
// multiPCFcompactCpp
List multiPCFcompactCpp(const std::vector<int>& nr, const NumericMatrix& sum, double gamma);
RcppExport SEXP _segmentation_multiPCFcompactCpp(SEXP nrSEXP, SEXP sumSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(multiPCFcompactCpp(nr, sum, gamma));
    return rcpp_result_gen;
END_RCPP
}
// expandMultiCpp
NumericMatrix expandMultiCpp(size_t nProbes, size_t nSamples, const std::vector<int>& lengthInt, const NumericMatrix& mean);
RcppExport SEXP _segmentation_expandMultiCpp(SEXP nProbesSEXP, SEXP nSamplesSEXP, SEXP lengthIntSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type nProbes(nProbesSEXP);
    Rcpp::traits::input_parameter< size_t >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type lengthInt(lengthIntSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mean(meanSEXP);
    rcpp_result_gen = Rcpp::wrap(expandMultiCpp(nProbes, nSamples, lengthInt, mean));
    return rcpp_result_gen;
END_RCPP
}
// filterMarkCpp
std::vector<bool> filterMarkCpp(const NumericVector& x, int kmin, int L, int L2, double frac1, double frac2, double frac3, double thres);
RcppExport SEXP _segmentation_filterMarkCpp(SEXP xSEXP, SEXP kminSEXP, SEXP LSEXP, SEXP L2SEXP, SEXP frac1SEXP, SEXP frac2SEXP, SEXP frac3SEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type frac1(frac1SEXP);
    Rcpp::traits::input_parameter< double >::type frac2(frac2SEXP);
    Rcpp::traits::input_parameter< double >::type frac3(frac3SEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(filterMarkCpp(x, kmin, L, L2, frac1, frac2, frac3, thres));
    return rcpp_result_gen;
END_RCPP
}
// compactCpp
List compactCpp(const NumericVector& y, const std::vector<bool>& mark);
RcppExport SEXP _segmentation_compactCpp(SEXP ySEXP, SEXP markSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type mark(markSEXP);
    rcpp_result_gen = Rcpp::wrap(compactCpp(y, mark));
    return rcpp_result_gen;
END_RCPP
}
// findEstCpp
List findEstCpp(const std::vector<int>& bestSplit, size_t N, const std::vector<int>& Nr, const std::vector<double>& Sum, bool yest);
RcppExport SEXP _segmentation_findEstCpp(SEXP bestSplitSEXP, SEXP NSEXP, SEXP NrSEXP, SEXP SumSEXP, SEXP yestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type bestSplit(bestSplitSEXP);
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Sum(SumSEXP);
    Rcpp::traits::input_parameter< bool >::type yest(yestSEXP);
    rcpp_result_gen = Rcpp::wrap(findEstCpp(bestSplit, N, Nr, Sum, yest));
    return rcpp_result_gen;
END_RCPP
}
// PottsCompactCpp
List PottsCompactCpp(int kmin, double gamma, const std::vector<int>& nr, const std::vector<double>& res, bool yest);
RcppExport SEXP _segmentation_PottsCompactCpp(SEXP kminSEXP, SEXP gammaSEXP, SEXP nrSEXP, SEXP resSEXP, SEXP yestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type res(resSEXP);
    Rcpp::traits::input_parameter< bool >::type yest(yestSEXP);
    rcpp_result_gen = Rcpp::wrap(PottsCompactCpp(kmin, gamma, nr, res, yest));
    return rcpp_result_gen;
END_RCPP
}
// findMarksCpp
std::vector<bool> findMarksCpp(const std::vector<bool> markSub, const std::vector<int>& Nr, int subsize);
RcppExport SEXP _segmentation_findMarksCpp(SEXP markSubSEXP, SEXP NrSEXP, SEXP subsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<bool> >::type markSub(markSubSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< int >::type subsize(subsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(findMarksCpp(markSub, Nr, subsize));
    return rcpp_result_gen;
END_RCPP
}
// markWithPottsCpp
std::vector<bool> markWithPottsCpp(int kmin, double gamma, const std::vector<int>& nr, const std::vector<double>& res, int subsize);
RcppExport SEXP _segmentation_markWithPottsCpp(SEXP kminSEXP, SEXP gammaSEXP, SEXP nrSEXP, SEXP resSEXP, SEXP subsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type res(resSEXP);
    Rcpp::traits::input_parameter< int >::type subsize(subsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(markWithPottsCpp(kmin, gamma, nr, res, subsize));
    return rcpp_result_gen;
END_RCPP
}
// exact_multipcf_
std::vector<int> exact_multipcf_(const NumericMatrix& y, unsigned int kmin, double gamma);
RcppExport SEXP _segmentation_exact_multipcf_(SEXP ySEXP, SEXP kminSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_multipcf_(y, kmin, gamma));
    return rcpp_result_gen;
END_RCPP
}
// fast_multipcf_
std::vector<int> fast_multipcf_(const NumericMatrix& y, std::vector<int>& available_breakpoints, int kmin, double gamma);
RcppExport SEXP _segmentation_fast_multipcf_(SEXP ySEXP, SEXP available_breakpointsSEXP, SEXP kminSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type available_breakpoints(available_breakpointsSEXP);
    Rcpp::traits::input_parameter< int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_multipcf_(y, available_breakpoints, kmin, gamma));
    return rcpp_result_gen;
END_RCPP
}
// exact_pcf_
std::vector<int> exact_pcf_(const std::vector<double>& y, unsigned int kmin, double gamma);
RcppExport SEXP _segmentation_exact_pcf_(SEXP ySEXP, SEXP kminSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_pcf_(y, kmin, gamma));
    return rcpp_result_gen;
END_RCPP
}
// fast_pcf_
std::vector<int> fast_pcf_(const std::vector<double>& y, std::vector<int>& available_breakpoints, int kmin, double gamma);
RcppExport SEXP _segmentation_fast_pcf_(SEXP ySEXP, SEXP available_breakpointsSEXP, SEXP kminSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type available_breakpoints(available_breakpointsSEXP);
    Rcpp::traits::input_parameter< int >::type kmin(kminSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_pcf_(y, available_breakpoints, kmin, gamma));
    return rcpp_result_gen;
END_RCPP
}
// convolve_
std::vector<double> convolve_(const std::vector<double>& x, const std::vector<double>& k);
RcppExport SEXP _segmentation_convolve_(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_(x, k));
    return rcpp_result_gen;
END_RCPP
}
// median_
double median_(NumericVector x);
RcppExport SEXP _segmentation_median_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(median_(x));
    return rcpp_result_gen;
END_RCPP
}
// mad_
double mad_(NumericVector x, double scale_factor);
RcppExport SEXP _segmentation_mad_(SEXP xSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(mad_(x, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// mark_
std::vector<int> mark_(const std::vector<double>& x, double nmad, int filter_size);
RcppExport SEXP _segmentation_mark_(SEXP xSEXP, SEXP nmadSEXP, SEXP filter_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type nmad(nmadSEXP);
    Rcpp::traits::input_parameter< int >::type filter_size(filter_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mark_(x, nmad, filter_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_segmentation_Crossprod", (DL_FUNC) &_segmentation_Crossprod, 2},
    {"_segmentation_Quantile", (DL_FUNC) &_segmentation_Quantile, 2},
    {"_segmentation_sawMarkMCpp", (DL_FUNC) &_segmentation_sawMarkMCpp, 4},
    {"_segmentation_compactMultiCpp", (DL_FUNC) &_segmentation_compactMultiCpp, 2},
    {"_segmentation_markMultiPottsCpp", (DL_FUNC) &_segmentation_markMultiPottsCpp, 4},
    {"_segmentation_multiPCFcompactCpp", (DL_FUNC) &_segmentation_multiPCFcompactCpp, 3},
    {"_segmentation_expandMultiCpp", (DL_FUNC) &_segmentation_expandMultiCpp, 4},
    {"_segmentation_filterMarkCpp", (DL_FUNC) &_segmentation_filterMarkCpp, 8},
    {"_segmentation_compactCpp", (DL_FUNC) &_segmentation_compactCpp, 2},
    {"_segmentation_findEstCpp", (DL_FUNC) &_segmentation_findEstCpp, 5},
    {"_segmentation_PottsCompactCpp", (DL_FUNC) &_segmentation_PottsCompactCpp, 5},
    {"_segmentation_findMarksCpp", (DL_FUNC) &_segmentation_findMarksCpp, 3},
    {"_segmentation_markWithPottsCpp", (DL_FUNC) &_segmentation_markWithPottsCpp, 5},
    {"_segmentation_exact_multipcf_", (DL_FUNC) &_segmentation_exact_multipcf_, 3},
    {"_segmentation_fast_multipcf_", (DL_FUNC) &_segmentation_fast_multipcf_, 4},
    {"_segmentation_exact_pcf_", (DL_FUNC) &_segmentation_exact_pcf_, 3},
    {"_segmentation_fast_pcf_", (DL_FUNC) &_segmentation_fast_pcf_, 4},
    {"_segmentation_convolve_", (DL_FUNC) &_segmentation_convolve_, 2},
    {"_segmentation_median_", (DL_FUNC) &_segmentation_median_, 1},
    {"_segmentation_mad_", (DL_FUNC) &_segmentation_mad_, 2},
    {"_segmentation_mark_", (DL_FUNC) &_segmentation_mark_, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_segmentation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
